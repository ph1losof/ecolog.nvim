local assert = require("luassert")
local stub = require("luassert.stub")
local mock = require("luassert.mock")

describe("LSP integration", function()
  local lsp_integration
  local test_dir
  local ecolog
  local providers
  local original_lsp_handlers
  local original_buf_methods

  local function create_test_env_file(path, content)
    vim.fn.mkdir(vim.fn.fnamemodify(path, ":h"), "p")
    local file = io.open(path, "w")
    if file then
      file:write(content)
      file:close()
    end
  end

  before_each(function()
    -- Clean up modules
    package.loaded["ecolog.integrations.lsp"] = nil
    package.loaded["ecolog"] = nil
    package.loaded["ecolog.providers"] = nil
    package.loaded["ecolog.utils"] = nil
    
    test_dir = vim.fn.tempname()
    vim.fn.mkdir(test_dir, "p")

    -- Create test env file
    create_test_env_file(test_dir .. "/.env", "TEST_VAR=test_value\nAPI_KEY=secret123\nDEBUG=true")
    
    -- Mock ecolog module
    ecolog = {
      get_env_vars = function()
        return {
          TEST_VAR = { source = test_dir .. "/.env", value = "test_value" },
          API_KEY = { source = test_dir .. "/.env", value = "secret123" },
          SHELL_VAR = { source = "shell", value = "shell_value" },
          SECRET_VAR = { source = "asm:secret-name", value = "secret_value" }
        }
      end,
      setup = function() end
    }
    package.loaded["ecolog"] = ecolog
    
    -- Mock providers module
    providers = {
      get_providers = function(filetype)
        return {
          { pattern = "process%.env%.([A-Z_][A-Z0-9_]*)", match_group = 1 }
        }
      end
    }
    package.loaded["ecolog.providers"] = providers
    
    -- Mock utils module  
    local utils = {
      get_var_word_under_cursor = function(providers)
        return "TEST_VAR" -- Default return for tests
      end
    }
    package.loaded["ecolog.utils"] = utils
    
    lsp_integration = require("ecolog.integrations.lsp")

    -- Store original LSP handlers
    original_lsp_handlers = {
      hover = vim.lsp.handlers["textDocument/hover"],
      definition = vim.lsp.handlers["textDocument/definition"],
    }
    
    -- Store original buf methods
    original_buf_methods = {
      hover = vim.lsp.buf.hover,
      definition = vim.lsp.buf.definition,
    }
  end)

  after_each(function()
    -- Restore LSP integration
    if lsp_integration and lsp_integration.restore then
      pcall(lsp_integration.restore)
    end
    
    -- Restore original handlers
    if original_lsp_handlers then
      vim.lsp.handlers["textDocument/hover"] = original_lsp_handlers.hover
      vim.lsp.handlers["textDocument/definition"] = original_lsp_handlers.definition
    end
    
    -- Restore buf methods
    if original_buf_methods then
      if original_buf_methods.hover then
        vim.lsp.buf.hover = original_buf_methods.hover
      end
      if original_buf_methods.definition then
        vim.lsp.buf.definition = original_buf_methods.definition
      end
    end
    
    -- Clean up test directory
    if test_dir then
      pcall(vim.fn.delete, test_dir, "rf")
    end
    
    -- Revert any remaining stubs - this is critical for memory leak prevention
    pcall(function()
      if require("luassert.stub").revert_all then
        require("luassert.stub").revert_all()
      end
    end)
    
    -- Clear loaded modules to prevent state persistence
    package.loaded["ecolog.integrations.lsp"] = nil
    package.loaded["ecolog"] = nil  
    package.loaded["ecolog.providers"] = nil
    package.loaded["ecolog.utils"] = nil
    
    -- Force garbage collection
    collectgarbage("collect")
    
    -- Small delay to allow cleanup to complete
    vim.wait(10)
  end)

  describe("setup", function()
    it("should setup LSP handlers", function()
      lsp_integration.setup()
      
      assert.is_function(vim.lsp.handlers["textDocument/hover"])
      assert.is_function(vim.lsp.handlers["textDocument/definition"])
    end)

    it("should preserve original handlers", function()
      local original_hover = vim.lsp.handlers["textDocument/hover"]
      local original_definition = vim.lsp.handlers["textDocument/definition"]
      
      lsp_integration.setup()
      
      -- Handlers should be replaced but original should be preserved internally
      assert.is_function(vim.lsp.handlers["textDocument/hover"])
      assert.is_function(vim.lsp.handlers["textDocument/definition"])
    end)
  end)

  describe("hover integration", function()
    before_each(function()
      lsp_integration.setup()
    end)

    it("should handle hover for environment variables", function()
      -- Mock utils.get_var_word_under_cursor to return TEST_VAR
      local utils = require("ecolog.utils")
      stub(utils, "get_var_word_under_cursor").returns("TEST_VAR")
      
      -- Mock EcologPeek command
      local peek_called = false
      local commands = vim.api.nvim_get_commands({})
      commands.EcologPeek = {
        callback = function(args)
          peek_called = true
          assert.equals("TEST_VAR", args.args)
        end
      }
      stub(vim.api, "nvim_get_commands").returns(commands)
      
      -- Simulate hover request
      local handler = vim.lsp.handlers["textDocument/hover"]
      handler(nil, {}, { bufnr = 0, method = "textDocument/hover" }, {})
      
      assert.is_true(peek_called)
      
      utils.get_var_word_under_cursor:revert()
      vim.api.nvim_get_commands:revert()
    end)

    it("should fall back to original handler for non-env variables", function()
      local utils = require("ecolog.utils")
      stub(utils, "get_var_word_under_cursor").returns("non_env_var")
      
      local original_called = false
      local original_handler = function(err, result, ctx, config)
        original_called = true
      end
      
      vim.lsp.handlers["textDocument/hover"] = original_handler
      lsp_integration.setup()
      
      local handler = vim.lsp.handlers["textDocument/hover"]
      handler(nil, {}, { bufnr = 0, method = "textDocument/hover" }, {})
      
      assert.is_true(original_called)
      
      utils.get_var_word_under_cursor:revert()
    end)

    it("should handle errors gracefully", function()
      local error_handled = false
      local original_handler = function(err, result, ctx, config)
        error_handled = true
        assert.is_not_nil(err)
      end
      
      vim.lsp.handlers["textDocument/hover"] = original_handler
      lsp_integration.setup()
      
      local handler = vim.lsp.handlers["textDocument/hover"]
      handler("test error", {}, { bufnr = 0, method = "textDocument/hover" }, {})
      
      assert.is_true(error_handled)
    end)
  end)

  describe("definition integration", function()
    before_each(function()
      lsp_integration.setup()
    end)

    it("should handle definition for environment variables", function()
      local utils = require("ecolog.utils")
      stub(utils, "get_var_word_under_cursor").returns("TEST_VAR")
      
      -- Mock vim.cmd to capture edit command
      local edit_called = false
      local edit_file = nil
      stub(vim.cmd, function(cmd_str)
        if cmd_str:match("^edit ") then
          edit_called = true
          edit_file = cmd_str:match("edit (.+)")
        end
      end)
      
      -- Mock file navigation
      stub(vim.api, "nvim_buf_get_lines").returns({"TEST_VAR=test_value", "API_KEY=secret123"})
      stub(vim.api, "nvim_win_set_cursor")
      
      local handler = vim.lsp.handlers["textDocument/definition"]
      handler(nil, {}, { bufnr = 0, method = "textDocument/definition" }, {})
      
      assert.is_true(edit_called)
      assert.is_not_nil(edit_file)
      
      utils.get_var_word_under_cursor:revert()
      vim.cmd:revert()
      vim.api.nvim_buf_get_lines:revert()
      vim.api.nvim_win_set_cursor:revert()
    end)

    it("should handle shell variables with warning", function()
      local utils = require("ecolog.utils")
      stub(utils, "get_var_word_under_cursor").returns("SHELL_VAR")
      
      -- Mock ecolog to return shell variable
      local get_env_vars_stub = stub(ecolog, "get_env_vars")
      get_env_vars_stub.returns({
        SHELL_VAR = { source = "shell", value = "shell_value" }
      })
      
      -- Mock vim.notify
      local notify_called = false
      local notify_msg = nil
      stub(vim, "notify", function(msg, level)
        notify_called = true
        notify_msg = msg
      end)
      
      local handler = vim.lsp.handlers["textDocument/definition"]
      handler(nil, {}, { bufnr = 0, method = "textDocument/definition" }, {})
      
      assert.is_true(notify_called)
      assert.is_true(notify_msg:find("Cannot go to definition of shell variables"))
      
      utils.get_var_word_under_cursor:revert()
      get_env_vars_stub:revert()
      vim.notify:revert()
    end)

    it("should handle secret manager variables with warning", function()
      local utils = require("ecolog.utils")
      stub(utils, "get_var_word_under_cursor").returns("SECRET_VAR")
      
      -- Mock ecolog to return secret manager variable
      local get_env_vars_stub = stub(ecolog, "get_env_vars")
      get_env_vars_stub.returns({
        SECRET_VAR = { source = "asm:secret-name", value = "secret_value" }
      })
      
      -- Mock vim.notify
      local notify_called = false
      local notify_msg = nil
      stub(vim, "notify", function(msg, level)
        notify_called = true
        notify_msg = msg
      end)
      
      local handler = vim.lsp.handlers["textDocument/definition"]
      handler(nil, {}, { bufnr = 0, method = "textDocument/definition" }, {})
      
      assert.is_true(notify_called)
      assert.is_true(notify_msg:find("Cannot go to definition of secret manager variables"))
      
      utils.get_var_word_under_cursor:revert()
      get_env_vars_stub:revert()
      vim.notify:revert()
    end)
  end)

  describe("buf methods integration", function()
    before_each(function()
      lsp_integration.setup()
    end)

    it("should override vim.lsp.buf.hover", function()
      assert.is_function(vim.lsp.buf.hover)
      
      local utils = require("ecolog.utils")
      stub(utils, "get_var_word_under_cursor").returns("TEST_VAR")
      
      -- Mock EcologPeek command
      local peek_called = false
      local commands = vim.api.nvim_get_commands({})
      commands.EcologPeek = {
        callback = function(args)
          peek_called = true
        end
      }
      stub(vim.api, "nvim_get_commands").returns(commands)
      
      vim.lsp.buf.hover()
      
      assert.is_true(peek_called)
      
      utils.get_var_word_under_cursor:revert()
      vim.api.nvim_get_commands:revert()
    end)

    it("should override vim.lsp.buf.definition", function()
      assert.is_function(vim.lsp.buf.definition)
      
      local utils = require("ecolog.utils")
      stub(utils, "get_var_word_under_cursor").returns("TEST_VAR")
      
      -- Mock vim.cmd and file operations
      stub(vim.cmd)
      stub(vim.api, "nvim_buf_get_lines").returns({"TEST_VAR=test_value"})
      stub(vim.api, "nvim_win_set_cursor")
      
      vim.lsp.buf.definition()
      
      assert.stub(vim.cmd).was_called()
      
      utils.get_var_word_under_cursor:revert()
      vim.cmd:revert()
      vim.api.nvim_buf_get_lines:revert()
      vim.api.nvim_win_set_cursor:revert()
    end)
  end)

  describe("restore functionality", function()
    it("should restore original handlers", function()
      local original_hover = vim.lsp.handlers["textDocument/hover"]
      local original_definition = vim.lsp.handlers["textDocument/definition"]
      
      lsp_integration.setup()
      
      -- Handlers should be different after setup
      assert.not_equals(original_hover, vim.lsp.handlers["textDocument/hover"])
      assert.not_equals(original_definition, vim.lsp.handlers["textDocument/definition"])
      
      lsp_integration.restore()
      
      -- Should restore original handlers (or nil if none existed)
      if original_hover then
        assert.equals(original_hover, vim.lsp.handlers["textDocument/hover"])
      end
      if original_definition then  
        assert.equals(original_definition, vim.lsp.handlers["textDocument/definition"])
      end
    end)

    it("should restore original buf methods", function()
      local original_hover = vim.lsp.buf.hover
      local original_definition = vim.lsp.buf.definition
      
      lsp_integration.setup()
      lsp_integration.restore()
      
      assert.equals(original_hover, vim.lsp.buf.hover)
      assert.equals(original_definition, vim.lsp.buf.definition)
    end)
  end)

  describe("filetype specific behavior", function()
    it("should work with different filetypes", function()
      vim.bo.filetype = "javascript"
      
      local utils = require("ecolog.utils")
      stub(utils, "get_var_word_under_cursor").returns("TEST_VAR")
      
      -- Mock providers to return JavaScript-specific providers
      stub(providers, "get_providers").returns({
        { pattern = "process%.env%.([A-Z_][A-Z0-9_]*)", match_group = 1 }
      })
      
      lsp_integration.setup()
      
      -- Mock EcologPeek command
      local peek_called = false
      local commands = vim.api.nvim_get_commands({})
      commands.EcologPeek = {
        callback = function() peek_called = true end
      }
      stub(vim.api, "nvim_get_commands").returns(commands)
      
      local handler = vim.lsp.handlers["textDocument/hover"]
      handler(nil, {}, { bufnr = 0, method = "textDocument/hover" }, {})
      
      assert.is_true(peek_called)
      
      utils.get_var_word_under_cursor:revert()
      providers.get_providers:revert()
      vim.api.nvim_get_commands:revert()
    end)
  end)

  describe("neovim version compatibility", function()
    it("should handle different Neovim versions", function()
      -- This test ensures the integration works across Neovim versions
      local version_check = (vim.version and vim.version().minor >= 11)
      
      lsp_integration.setup()
      
      -- Basic functionality should work regardless of version
      assert.is_function(vim.lsp.handlers["textDocument/hover"])
      assert.is_function(vim.lsp.handlers["textDocument/definition"])
      
      if version_check then
        -- Advanced features are available in newer versions
        assert.is_not_nil(vim.lsp.buf.hover)
        assert.is_not_nil(vim.lsp.buf.definition)
      end
    end)
  end)

  describe("error handling", function() 
    it("should handle missing providers gracefully", function()
      stub(providers, "get_providers").returns({})
      
      local utils = require("ecolog.utils")
      stub(utils, "get_var_word_under_cursor").returns(nil)
      
      lsp_integration.setup()
      
      -- Should not crash when no providers or variables are found
      local success = pcall(function()
        local handler = vim.lsp.handlers["textDocument/hover"]
        handler(nil, {}, { bufnr = 0, method = "textDocument/hover" }, {})
      end)
      
      assert.is_true(success)
      
      providers.get_providers:revert()
      utils.get_var_word_under_cursor:revert()
    end)

    it("should handle missing ecolog module gracefully", function()
      -- Temporarily break ecolog module
      package.loaded["ecolog"] = nil
      
      -- Should not crash during setup
      local success = pcall(function()
        lsp_integration.setup()
      end)
      
      -- Should fail gracefully or succeed with fallback
      assert.is_boolean(success)
    end)
  end)
end)